//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Shader for Map Geometry";
	DevShader = true;
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
MODES
{
    VrForward();													// Indicates this shader will be used for main rendering
    Depth( "vr_depth_only.vfx" ); 									// Shader that will be used for shadowing and depth prepass
    ToolsVis( S_MODE_TOOLS_VIS ); 									// Ability to see in the editor
    ToolsWireframe( "vr_tools_wireframe.vfx" ); 					// Allows for mat_wireframe to work
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" ); 	// Shows how expensive drawing is in debug view
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"
	CreateInputTexture2D( SpriteSheet,            Srgb,   8, "",                 "_color",  "Material,10/10", Default3( 1.0, 1.0, 1.0 ) );
	CreateInputTexture2D( SpriteSheetNormal,           Linear, 8, "NormalizeNormals", "_normal", "Material,10/20", Default3( 0.5, 0.5, 1.0 ) );

	CreateInputTexture2D( SpriteSheetTintMask,     Linear, 8, "",                 "_tint",   "Material,10/70", Default( 1.0 ) );
    #define COLOR_TEXTURE_CHANNELS Channel( RGB,  Box( SpriteSheet ), Srgb ); Channel( A, Box( SpriteSheetTintMask ), Linear )

	CreateTexture2D( g_tSpriteSheetTex )  <COLOR_TEXTURE_CHANNELS; OutputFormat( BC7 ); SrgbRead( true );Filter(NEAREST);AddressU( WRAP );AddressV( WRAP ); >;
	CreateTexture2D( g_tSpriteSheetNormalTex ) <Channel( RGBA, Box( SpriteSheetNormal ), Linear ); OutputFormat( BC7 ); SrgbRead( false );Filter(NEAREST);AddressU( WRAP );AddressV( WRAP ); >;

	float3 Tint<Attribute("TintColor");>;
	float TintAmount<Attribute("TintAmount");>;

	#define PS_INPUT_HAS_TANGENT_BASIS 1
}

//=========================================================================================================================

struct VertexInput
{
	#include "common/vertexinput.hlsl"
};

//=========================================================================================================================

struct PixelInput
{
	#include "common/pixelinput.hlsl"

	float3 wBitangent : TEXCOORD13;
};



//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"
	//
	// Main
	//
	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PixelInput o = ProcessVertex( i );
		// Add your vertex manipulation functions here
		
		o = FinalizeVertex( o );
		o.wBitangent = cross(-o.vTangentUWs,o.vNormalWs) *o.vTangentVWs.y;
		float3 normal = normalize(o.vNormalWs.xyz);
    	float3 tangent = normalize(o.vTangentUWs.xyz);

		o.wBitangent = cross(normal, tangent.xyz);
		return o;
	}
}


//=========================================================================================================================

PS
{
    #include "spritekit/Pixel.hlsl"

	//
	// Main
	//
	PixelOutput MainPs( PixelInput i )
	{
		PixelOutput o;

		float4 Color = Tex2D(g_tSpriteSheetTex, i.vTextureCoords.xy).rgba;
		o.vColor.a = Color.a;
        o.vColor.rgb = Color.rgb;
		o.vColor.rgb = saturate(o.vColor.rgb + (Tint.rgb*TintAmount));
		
		
		return o;
	}
}